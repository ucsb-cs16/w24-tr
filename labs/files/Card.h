#ifndef CARD_H
#define CARD_H

// This file defines the Card type used to represent playing cards.
// It also includes some useful constants and operators.
// Do not edit this file.

#include <iostream>

// An enum lets you use a name for a constant rather than
// having to remember a value.  Instead of remembering that
// 13 is the code for kings, you can write Rank::KING, and
// your code becomes much more readable.
enum Rank {
  TWO   =  2,
  THREE =  3,
  FOUR  =  4,
  FIVE  =  5,
  SIX   =  6,
  SEVEN =  7,
  EIGHT =  8,
  NINE  =  9,
  TEN   = 10,
  JACK  = 11,
  QUEEN = 12,
  KING  = 13,
  ACE   = 14
};

// An enum for suits.
enum Suit {
  CLUBS    = 0,
  DIAMONDS = 1,
  HEARTS   = 2,
  SPADES   = 3
};


struct Card {
  // Member Variables
  Rank rank;
  Suit suit;

  // Default Constructor
  // This creates a "Zero of Clubs"
  Card() {
    rank = Rank(0);
    suit = Suit(0);
  }

  // User-Friendly Constructor 1
  Card(int rank, Suit suit) {
    this->rank = Rank(rank);
    this->suit = suit;
  }

  // User-Friendly Constructor 2
  Card(Rank rank, Suit suit) {
    this->rank = rank;
    this->suit = suit;
  }

  // A full set of comparison operators.
  bool operator <  (Card other) const {return rank <  other.rank || (rank == other.rank && suit <  other.suit);}
  bool operator <= (Card other) const {return rank <  other.rank || (rank == other.rank && suit <= other.suit);}
  bool operator >  (Card other) const {return rank >  other.rank || (rank == other.rank && suit >  other.suit);}
  bool operator >= (Card other) const {return rank >  other.rank || (rank == other.rank && suit >= other.suit);}
  bool operator == (Card other) const {return rank == other.rank && suit == other.suit;}
  bool operator != (Card other) const {return rank != other.rank || suit != other.suit;}

  // A convenience function for pretty printing.
  void print() {
    if(rank >= Rank::JACK && rank <= Rank::ACE) {
      std::cout << "JQKA"[rank - Rank::JACK];
    }
    else {
      std::cout << rank;
    }

    const static char* SUITS[] = {"♣", "♦", "♥", "♠"};
    if(suit >= Suit::CLUBS && suit <= Suit::SPADES) {
      std::cout << SUITS[suit];
    }
    else {
      std::cout << '?' << '\n';
    }
  }
};

#endif
